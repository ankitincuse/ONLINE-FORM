-- Create admin users table
DROP TABLE IF EXISTS admin_users CASCADE;

CREATE TABLE admin_users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    failed_attempts INTEGER DEFAULT 0,
    last_failed_attempt TIMESTAMPTZ,
    account_locked BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;

-- Create policy
CREATE POLICY "Enable read access for all users" ON admin_users
    FOR SELECT TO anon
    USING (true);

CREATE POLICY "Enable insert for anon" ON admin_users
    FOR INSERT TO anon
    WITH CHECK (true);

CREATE POLICY "Enable update for anon" ON admin_users
    FOR UPDATE TO anon
    USING (true)
    WITH CHECK (true);

-- Grant permissions
GRANT ALL ON admin_users TO anon;
GRANT USAGE ON SEQUENCE admin_users_id_seq TO anon;

-- Create form_data table
CREATE TABLE IF NOT EXISTS form_data (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    mobile_number VARCHAR(15) NOT NULL,
    email VARCHAR(100),
    address TEXT NOT NULL,
    dob DATE NOT NULL,
    joining_date DATE NOT NULL,
    aadhar_number VARCHAR(12) NOT NULL,
    father_name VARCHAR(100) NOT NULL,
    height DECIMAL(5,2),
    weight DECIMAL(5,2),
    passport_photo_url TEXT,
    aadhar_card_url TEXT,
    bank_doc_url TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create academic_details table
CREATE TABLE IF NOT EXISTS academic_details (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    form_id BIGINT REFERENCES form_data(id) ON DELETE CASCADE,
    qualification VARCHAR(100) NOT NULL,
    institute VARCHAR(200) NOT NULL,
    passing_year INTEGER NOT NULL,
    percentage DECIMAL(5,2) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create reference_details table
CREATE TABLE IF NOT EXISTS reference_details (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    form_id BIGINT REFERENCES form_data(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    mobile_number VARCHAR(15) NOT NULL,
    relation VARCHAR(100) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create company_settings table
CREATE TABLE IF NOT EXISTS company_settings (
    id INTEGER PRIMARY KEY,
    logo_url TEXT,
    logo_width INTEGER,
    logo_height INTEGER,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create initial settings
INSERT INTO company_settings (id, logo_url, logo_width, logo_height, updated_at)
VALUES (1, NULL, NULL, NULL, NOW())
ON CONFLICT (id) DO NOTHING;

-- Insert default admin user (password: admin123)
INSERT INTO admin_users (username, password_hash)
VALUES ('admin', '$2b$10$3euPcmQFCiblsZeEu5s7p.9wvEWFx1g1P0YWyL0tUEU.A88nL/2Eq')
ON CONFLICT (username) DO NOTHING;

-- Grant permissions
GRANT ALL ON form_data TO anon;
GRANT ALL ON academic_details TO anon;
GRANT ALL ON reference_details TO anon;
GRANT ALL ON company_settings TO anon;
GRANT ALL ON admin_users TO anon;

-- Grant sequence permissions
GRANT USAGE ON SEQUENCE form_data_id_seq TO anon;
GRANT USAGE ON SEQUENCE academic_details_id_seq TO anon;
GRANT USAGE ON SEQUENCE reference_details_id_seq TO anon;
GRANT USAGE ON SEQUENCE admin_users_id_seq TO anon;

-- Create exec_sql function for running SQL commands
CREATE OR REPLACE FUNCTION exec_sql(sql text)
RETURNS void AS $$
BEGIN
  EXECUTE sql;
END;
$$ LANGUAGE plpgsql;
